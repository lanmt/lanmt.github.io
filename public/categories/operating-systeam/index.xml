<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Operating Systeam on Lanmt O.o</title>
        <link>http://localhost:1313/categories/operating-systeam/</link>
        <description>Recent content in Operating Systeam on Lanmt O.o</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 02 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/operating-systeam/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>一些操作系统的八股</title>
        <link>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%AB%E8%82%A1/</link>
        <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;计算机系统基础&#34;&gt;&lt;a href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;计算机系统基础
&lt;/h1&gt;&lt;h2 id=&#34;什么是操作系统&#34;&gt;&lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;什么是操作系统
&lt;/h2&gt;&lt;p&gt;操作系统是管理计算机硬件和软件资源、给&lt;strong&gt;应用程序和用户提供底层抽象&lt;/strong&gt;的一种系统软件。操作系统起到了计算机系统中的核心作用，它负责协调、控制和管理计算机&lt;strong&gt;硬件设备、系统资源和应用程序&lt;/strong&gt;的执行。主要功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件管理&lt;/li&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;系统安全与保护&lt;/li&gt;
&lt;li&gt;用户接口&lt;/li&gt;
&lt;li&gt;系统服务和应用程序支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;冯诺依曼结构&#34;&gt;&lt;a href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e7%bb%93%e6%9e%84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;冯诺依曼结构
&lt;/h2&gt;&lt;p&gt;包括&lt;strong&gt;存储器、中央处理器（算术逻辑单元、控制单元）、输入设备、输出设备、总线。&lt;/strong&gt;/
冯诺依曼结构的主要优点是将程序和数据存储在同一个存储器中，更加灵活。&lt;/p&gt;
&lt;h2 id=&#34;宏内核和微内核&#34;&gt;&lt;a href=&#34;#%e5%ae%8f%e5%86%85%e6%a0%b8%e5%92%8c%e5%be%ae%e5%86%85%e6%a0%b8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;宏内核和微内核
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;宏内核&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;宏内核架构将操作系统的所有基本功能都集成在一个单一的大内核中。&lt;br&gt;
性能高但较复杂，安全风险大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;微内核&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将核心功能精简为最基本的部分，将其他的功能模块发在用户空间。模块化、灵活性、安全性高，但频繁的用户空间和内核空间切换会影响性能。&lt;/p&gt;
&lt;h2 id=&#34;缓存&#34;&gt;&lt;a href=&#34;#%e7%bc%93%e5%ad%98&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;缓存
&lt;/h2&gt;&lt;h3 id=&#34;组织方式&#34;&gt;&lt;a href=&#34;#%e7%bb%84%e7%bb%87%e6%96%b9%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;组织方式
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接映射缓存&lt;/li&gt;
&lt;li&gt;全相联映射缓存&lt;/li&gt;
&lt;li&gt;组相联映射缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;替换策略&#34;&gt;&lt;a href=&#34;#%e6%9b%bf%e6%8d%a2%e7%ad%96%e7%95%a5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;替换策略
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;随机替换&lt;/li&gt;
&lt;li&gt;最近最少使用&lt;/li&gt;
&lt;li&gt;最不经常使用&lt;/li&gt;
&lt;li&gt;先进先出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序执行的基本过程&#34;&gt;&lt;a href=&#34;#%e7%a8%8b%e5%ba%8f%e6%89%a7%e8%a1%8c%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;程序执行的基本过程
&lt;/h2&gt;&lt;h3 id=&#34;编译&#34;&gt;&lt;a href=&#34;#%e7%bc%96%e8%af%91&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;编译
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于编译型语言，源代码需通常需要经过&lt;strong&gt;预编译、编译、汇编&lt;/strong&gt;，将其编译成目标代码，通常是二进制文件。&lt;/li&gt;
&lt;li&gt;对于解释性语言，而不需要实现编译成可执行程序，而是在运行时由解释器逐行解释并执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加载&#34;&gt;&lt;a href=&#34;#%e5%8a%a0%e8%bd%bd&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;加载
&lt;/h3&gt;&lt;p&gt;当可执行程序准备好后，操作系统将其加载到内存中。这个过程涉及分配内存、加载代码和数据等。&lt;/p&gt;
&lt;h3 id=&#34;代码执行&#34;&gt;&lt;a href=&#34;#%e4%bb%a3%e7%a0%81%e6%89%a7%e8%a1%8c&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;代码执行
&lt;/h3&gt;&lt;h3 id=&#34;系统调用与库函数&#34;&gt;&lt;a href=&#34;#%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8%e4%b8%8e%e5%ba%93%e5%87%bd%e6%95%b0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;系统调用与库函数
&lt;/h3&gt;&lt;p&gt;有可能需要与操作系统或其他库交互。&lt;/p&gt;
&lt;h2 id=&#34;字符编码&#34;&gt;&lt;a href=&#34;#%e5%ad%97%e7%ac%a6%e7%bc%96%e7%a0%81&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;字符编码
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ASCII&lt;/strong&gt;：ASCII是一种基于拉丁字母表的字符编码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode&lt;/strong&gt;：Unicode是一种广泛的字符集。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;：UTF-8是Unicode字符集的一种编码方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内存管理&#34;&gt;&lt;a href=&#34;#%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;内存管理
&lt;/h1&gt;&lt;h2 id=&#34;内存虚拟化&#34;&gt;&lt;a href=&#34;#%e5%86%85%e5%ad%98%e8%99%9a%e6%8b%9f%e5%8c%96&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;内存虚拟化
&lt;/h2&gt;&lt;p&gt;内存虚拟化是一种将物理资源抽象、管理和分配的技术。&lt;/p&gt;
&lt;h3 id=&#34;主要目的&#34;&gt;&lt;a href=&#34;#%e4%b8%bb%e8%a6%81%e7%9b%ae%e7%9a%84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;主要目的
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;资源隔离与共享&lt;/li&gt;
&lt;li&gt;易用性：简化了内存管理。&lt;/li&gt;
&lt;li&gt;容错与恢复&lt;/li&gt;
&lt;li&gt;内存优化&lt;/li&gt;
&lt;li&gt;进程保护：每个进程都有自己的虚拟地址空间，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;抖动&#34;&gt;&lt;a href=&#34;#%e6%8a%96%e5%8a%a8&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;抖动
&lt;/h2&gt;&lt;p&gt;频繁发生页面置换操作，会导致系统性能急剧下降。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过高的内存需求&lt;/li&gt;
&lt;li&gt;不恰当的内存分配&lt;/li&gt;
&lt;li&gt;不合理的页置换算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elf文件格式&#34;&gt;&lt;a href=&#34;#elf%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;elf文件格式
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ELF 头部&lt;/li&gt;
&lt;li&gt;程序头表&lt;/li&gt;
&lt;li&gt;段头表&lt;/li&gt;
&lt;li&gt;段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;malloc的实现&#34;&gt;&lt;a href=&#34;#malloc%e7%9a%84%e5%ae%9e%e7%8e%b0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;malloc的实现
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;初始化内存池&lt;/li&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;123&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
