<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机网络 on Lanmt O.o</title>
        <link>http://localhost:1313/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
        <description>Recent content in 计算机网络 on Lanmt O.o</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 30 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>一些计算机网络的八股</title>
        <link>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/</link>
        <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;&lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;概述
&lt;/h1&gt;&lt;h2 id=&#34;osi七层网络模型&#34;&gt;&lt;a href=&#34;#osi%e4%b8%83%e5%b1%82%e7%bd%91%e7%bb%9c%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;OSI七层网络模型
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;物理层：传输单位为&lt;strong&gt;比特流&lt;/strong&gt;。常用设备有：集线器、中继器、网线、双绞线、同轴电缆。&lt;/li&gt;
&lt;li&gt;数据链路层：传输单位为&lt;strong&gt;帧&lt;/strong&gt;，用MAC地址访问媒介，有错误检测和修正&lt;/li&gt;
&lt;li&gt;网络层：传输单位为&lt;strong&gt;包&lt;/strong&gt;。通过IP寻址来建立两个节点之间的连接，选择合适的路由和交换节点传递给目的端的运输层。&lt;/li&gt;
&lt;li&gt;传输层：传输单位为&lt;strong&gt;段&lt;/strong&gt;。实现网络不同主机上的用户进程之间的通信，可靠传输、错误检测、流量控制、拥塞控制。
应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcp&#34;&gt;&lt;a href=&#34;#tcp&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;TCP
&lt;/h2&gt;&lt;h3 id=&#34;头部结构&#34;&gt;&lt;a href=&#34;#%e5%a4%b4%e9%83%a8%e7%bb%93%e6%9e%84&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;头部结构
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-2.png&#34;
	width=&#34;750&#34;
	height=&#34;351&#34;
	srcset=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-2_hu84d0e3c98ac87f3bfa2d3857ff6f8032_64275_480x0_resize_box_3.png 480w, http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-2_hu84d0e3c98ac87f3bfa2d3857ff6f8032_64275_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;头部结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;512px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;校验和&#34;&gt;&lt;a href=&#34;#%e6%a0%a1%e9%aa%8c%e5%92%8c&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;校验和
&lt;/h3&gt;&lt;p&gt;TCP是端到端的传输，有发送方计算校验和，接收方进行验证，目的是为验证TCP首部和数据在发送过程中是否有差错。&lt;/p&gt;
&lt;h3 id=&#34;序列号确认应答&#34;&gt;&lt;a href=&#34;#%e5%ba%8f%e5%88%97%e5%8f%b7%e7%a1%ae%e8%ae%a4%e5%ba%94%e7%ad%94&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;序列号/确认应答
&lt;/h3&gt;&lt;p&gt;接收方接收到信息后回复确认应答号ACK，不仅会告诉接收到哪些数据，还包括下一次消息从哪里发送。发送方没有接收到ACK会重新发送数据。&lt;/p&gt;
&lt;h3 id=&#34;超时重传&#34;&gt;&lt;a href=&#34;#%e8%b6%85%e6%97%b6%e9%87%8d%e4%bc%a0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;超时重传
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;发送方发送时丢失，长时间没有接收到确认应答号，发送方会主动重新发送。&lt;/li&gt;
&lt;li&gt;确认应答号ACK丢失，发送方也会重新发送，接收方通过校验和和序列号知道该数据已经接受，丢弃数据并发送ACK。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;&lt;a href=&#34;#%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;流量控制
&lt;/h3&gt;&lt;p&gt;在TCP报文字段中有个16位的字段标识滑动窗口的大小，窗口大小就是剩余缓冲区大小，在回复ACK时，接收方将自己剩余缓冲区大小填入。发送方会根据ACK里滑动窗口的大小调整自己的发送速度，如果缓冲区为0停止发送，并定期发送探测报文。&lt;/p&gt;
&lt;h3 id=&#34;拥塞控制&#34;&gt;&lt;a href=&#34;#%e6%8b%a5%e5%a1%9e%e6%8e%a7%e5%88%b6&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;拥塞控制
&lt;/h3&gt;&lt;p&gt;慢启动、拥塞避免、快速重传、快速回复&lt;/p&gt;
&lt;h3 id=&#34;三次握手&#34;&gt;&lt;a href=&#34;#%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;三次握手
&lt;/h3&gt;&lt;p&gt;三次握手的目的
&lt;img src=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image.png&#34;
	width=&#34;750&#34;
	height=&#34;488&#34;
	srcset=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image_hua51089af2fc8abfc8b6278daf33f51a4_136517_480x0_resize_box_3.png 480w, http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image_hua51089af2fc8abfc8b6278daf33f51a4_136517_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;三次握手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;368px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一次握手&lt;/strong&gt;
客户端请求连接，将首部的SYN表示位置设为1，初始化序列号seq=x，发送给服务器，进入SYN_SENT状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二次握手&lt;/strong&gt;
服务器收到SYN后，将首部的SYN和ACK标识位置设为1，回复ACK的值为x+1，同时自己初始化一个序列号seq=y，发送给客户端，进入SYN_RECV状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三次握手&lt;/strong&gt;
客户端接收到服务器的SYN和ACK包后，向服务器发送确认包ACK值为y+1，序列号seq=x+1，客户端进入established状态，服务器接收到此分组也进入established状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么不是两次握手&#34;&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e6%98%af%e4%b8%a4%e6%ac%a1%e6%8f%a1%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;为什么不是两次握手
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免历史连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一次客户端发送的连接请求在网络中滞留，又重新发送了连接请求然后连接成功，等关闭连接之后，滞留在网络中的连接请求到达服务端，服务端会就会发送确认认为已经建立了连接，浪费资源。如果是三次握手，则客户端收到服务器的确认不会进行下一次握手，服务器收不到第三次握手就不会开放连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步双方初始序列号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三次握手客户端可以确认服务端的序列起始号。（全双工）&lt;/p&gt;
&lt;h3 id=&#34;四次挥手&#34;&gt;&lt;a href=&#34;#%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;四次挥手
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-1.png&#34;
	width=&#34;1108&#34;
	height=&#34;687&#34;
	srcset=&#34;http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-1_hu1118dfb8686ad7b9f3a9a9fcb5e87e21_280926_480x0_resize_box_3.png 480w, http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%85%AB%E8%82%A1/image-1_hu1118dfb8686ad7b9f3a9a9fcb5e87e21_280926_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;四次挥手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一次挥手&lt;/strong&gt;
客户端发送释放报文，并停止发送数据，将FIN置为1，序列号seq=u发送给服务器，u等于前面已经传送过来的数据的最后一个字节加1，进入FIN-WAIT-1状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二次挥手&lt;/strong&gt;
服务端收到释放报文后，发送确认报文，ACK标识位置为1，ACK的值为客户端发送的序列号u+1，并带上自己的序列号v，然后服务端进入CLOSED-WAIT状态。这时服务端能继续发送数据，客户端也能继续接收数据。&lt;br&gt;
客户端收到服务端的确认后，等待服务端发送释放报文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三次挥手&lt;/strong&gt;
服务端数据处理完毕后，向客户端发送释放报文，FIN置为1，ACK的值u+1，因为可以会再发送一些数据，假设序列号为w，服务器进入LAST_ACK状态，等待客户端确认。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四次挥手&lt;/strong&gt;
客户端收到释放报文后，会发送确认报文，ACK的值设为w+1，序列值seq=u+1，然后客户端进入TIME_WAIT状态，当客户端释放TCB时，才进入CLOSED状态。而服务端只要收到确认报文就会进入CLOSED状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;msl&#34;&gt;&lt;a href=&#34;#msl&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;MSL
&lt;/h3&gt;&lt;p&gt;MSL是任何报文在网络中被丢弃前的最长存活时间，这个时间是有限的，因为TCP是以IP数据报的形式在网络中传输，IP有限制其生存的时间TTL，&lt;strong&gt;RFC793指出MSL为2分钟，现实中常用30秒或1分钟&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;tcp和udp的区别&#34;&gt;&lt;a href=&#34;#tcp%e5%92%8cudp%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;TCP和UDP的区别
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP面向连接&lt;/strong&gt;的，需要三次握手建立连接。&lt;strong&gt;UDP不需要进行建立连接&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP是可靠传输服务&lt;/strong&gt;。&lt;strong&gt;UDP尽最大努力交付&lt;/strong&gt;，不保证可靠传输。&lt;/li&gt;
&lt;li&gt;TCP是&lt;strong&gt;一对一连接&lt;/strong&gt;的。UPD支持&lt;strong&gt;一对一、一对多、多对一&lt;/strong&gt;等多种方式的通信。&lt;/li&gt;
&lt;li&gt;TCP&lt;strong&gt;适合需要可靠连接的服务&lt;/strong&gt;，比如付费、加密数据等等方向。&lt;strong&gt;UDP传输效率高，实时性好&lt;/strong&gt;，应用于高速传输并且对实时性有要求的通信。&lt;/li&gt;
&lt;li&gt;TCP&lt;strong&gt;首部较长&lt;/strong&gt;，且不固定长度。UDP首部&lt;strong&gt;固定长度8字节&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;TCP是流式传输，&lt;strong&gt;保证顺序和可靠&lt;/strong&gt;。UDP是一个包一个包发送的，&lt;strong&gt;可能会丢包和乱序到达&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;TCP数据太大在&lt;strong&gt;传输层&lt;/strong&gt;分片。UDP数据太大在&lt;strong&gt;IP层&lt;/strong&gt;分片。&lt;/li&gt;
&lt;li&gt;TCP适用于&lt;strong&gt;HTTP、FTP、电子邮件（SMTP、POP3）、SSH、MYSQL连接服务器&lt;/strong&gt;。UDP适用于&lt;strong&gt;实时通信、视频流传输、在线游戏&lt;/strong&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip&#34;&gt;&lt;a href=&#34;#ip&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;IP
&lt;/h2&gt;&lt;h3 id=&#34;输入url到显示屏连接的过程&#34;&gt;&lt;a href=&#34;#%e8%be%93%e5%85%a5url%e5%88%b0%e6%98%be%e7%a4%ba%e5%b1%8f%e8%bf%9e%e6%8e%a5%e7%9a%84%e8%bf%87%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;输入URL到显示屏连接的过程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;URL解析&lt;/li&gt;
&lt;li&gt;TCP连接&lt;/li&gt;
&lt;li&gt;发送HTTP请求&lt;/li&gt;
&lt;li&gt;页面渲染&lt;/li&gt;
&lt;li&gt;断开连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ping命令&#34;&gt;&lt;a href=&#34;#ping%e5%91%bd%e4%bb%a4&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;Ping命令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端向目标主机发送一个ICMP回显请求数据报，包括发送时间和一个序列号。&lt;/li&gt;
&lt;li&gt;目标主机收到ICMP回显应答数据报，也包括发送时间和一个序列号。&lt;/li&gt;
&lt;li&gt;客户端可以根据回显应答数据包计算往返时间。&lt;/li&gt;
&lt;li&gt;ICMP只能检测连接，不能检测宽带。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;traceroot&#34;&gt;&lt;a href=&#34;#traceroot&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;traceroot
&lt;/h3&gt;&lt;p&gt;traceroot是一种更高级的网络工具，用于追踪源主机到目标主机的传输路径。它通过逐步增加TLL的大小，来确定数据包经过的每一个路由器。&lt;br&gt;
因为路由器会给源主机发送ICMP&amp;quot;超时&amp;quot;消息。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
