<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>数据库 on Lanmt O.o</title>
        <link>http://localhost:1313/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <description>Recent content in 数据库 on Lanmt O.o</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 29 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>b&#43;tree</title>
        <link>http://localhost:1313/post/b&#43;tree/</link>
        <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/b&#43;tree/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/351240279&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;b--tree&#34;&gt;&lt;a href=&#34;#b--tree&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B- tree
&lt;/h1&gt;&lt;h2 id=&#34;基础概念&#34;&gt;&lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;基础概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;阶数：一个节点最多有多少孩子节点&lt;/li&gt;
&lt;li&gt;关键字：节点上的数值就是关键字&lt;/li&gt;
&lt;li&gt;度：一个节点拥有的子节点的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个m阶的B- tree，有以下特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根节点至少有两个子女&lt;/li&gt;
&lt;li&gt;每个非根节点包含的关键字个数j满足：(m-1) / 2 ≤ j ≤ m-1&lt;/li&gt;
&lt;li&gt;有k个关键字的非叶结点恰好有k+1个孩子&lt;/li&gt;
&lt;li&gt;所有的叶子结点都位于同一层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/b&amp;#43;tree/image.png&#34;
	width=&#34;600&#34;
	height=&#34;238&#34;
	srcset=&#34;http://localhost:1313/post/b&amp;#43;tree/image_hu7be53862353c4c32de15b6c256ac3ea1_50825_480x0_resize_box_3.png 480w, http://localhost:1313/post/b&amp;#43;tree/image_hu7be53862353c4c32de15b6c256ac3ea1_50825_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一个简单的b-tree&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;252&#34;
		data-flex-basis=&#34;605px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;b-tree&#34;&gt;&lt;a href=&#34;#b-tree&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B+ tree
&lt;/h1&gt;&lt;p&gt;一个m阶的B- tree，有以下特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点至多有m个子女&lt;/li&gt;
&lt;li&gt;每个非根节点包含的关键字个数j满足：(m-1) / 2 ≤ j ≤ m-1&lt;/li&gt;
&lt;li&gt;相邻叶子节点通过指针连起来，并且通关关键字大小排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/b&amp;#43;tree/image-1.png&#34;
	width=&#34;600&#34;
	height=&#34;216&#34;
	srcset=&#34;http://localhost:1313/post/b&amp;#43;tree/image-1_hu4d66c09613f021ec92452a5c7dd501b0_66501_480x0_resize_box_3.png 480w, http://localhost:1313/post/b&amp;#43;tree/image-1_hu4d66c09613f021ec92452a5c7dd501b0_66501_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一个3阶的B&amp;#43; tree&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;277&#34;
		data-flex-basis=&#34;666px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;b--tree和b-tree的主要区别&#34;&gt;&lt;a href=&#34;#b--tree%e5%92%8cb-tree%e7%9a%84%e4%b8%bb%e8%a6%81%e5%8c%ba%e5%88%ab&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B- tree和B+ tree的主要区别
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;B-树内部节点保存数据，但B+树内部节点是不保存数据的，只作索引作用。&lt;/li&gt;
&lt;li&gt;B+树的叶子结点通过链表指针连起来，而B-树不是。&lt;/li&gt;
&lt;li&gt;查找时，B-树找到目的值就结束，而B+树要通过索引找到叶子结点才结束&lt;/li&gt;
&lt;li&gt;B-树任何一个关键字出现且只出现在一个结点中，而B+树可以出现多次&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b树的插入&#34;&gt;&lt;a href=&#34;#b%e6%a0%91%e7%9a%84%e6%8f%92%e5%85%a5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B+树的插入
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;先找到要插入的叶子结点&lt;/li&gt;
&lt;li&gt;如果被插入关键字的叶子节点当前含有的关键字数量小于阶数m，则直接插入。&lt;/li&gt;
&lt;li&gt;插入之后的关键字的数量如果等于m，则该节点分裂成两个新的节点，各包含一半的关键字。&lt;/li&gt;
&lt;li&gt;分裂后，将右边的关键字插入到父节点中，回到3&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;b树的查找&#34;&gt;&lt;a href=&#34;#b%e6%a0%91%e7%9a%84%e6%9f%a5%e6%89%be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B+树的查找
&lt;/h2&gt;&lt;h3 id=&#34;单值查找&#34;&gt;&lt;a href=&#34;#%e5%8d%95%e5%80%bc%e6%9f%a5%e6%89%be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;单值查找
&lt;/h3&gt;&lt;p&gt;在B+树中查找x&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在节点中找到第一个大于等于x的关键字，继续向下查找孩子节点&lt;/li&gt;
&lt;li&gt;直到在叶子节点中找到x&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;范围查找&#34;&gt;&lt;a href=&#34;#%e8%8c%83%e5%9b%b4%e6%9f%a5%e6%89%be&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;范围查找
&lt;/h3&gt;&lt;p&gt;在B+树中查找满足[l,r]的区间&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按单值查找找到l&lt;/li&gt;
&lt;li&gt;然后遍历链表&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;b树的删除&#34;&gt;&lt;a href=&#34;#b%e6%a0%91%e7%9a%84%e5%88%a0%e9%99%a4&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;B+树的删除
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;找到包含关键值的节点，如果关键字个数大于(m-1)/2直接删除，如果删除的是父节点的关键字，则要更新父节点的值&lt;/li&gt;
&lt;li&gt;如果删除之后关键字个数小于(m-1)/2，则可以向兄弟结点借用关键字&lt;/li&gt;
&lt;li&gt;如果兄弟结点也不够，则要和兄弟结点合并，并且在父节点中删除右边孩子节点的关键字&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>一些数据库的八股</title>
        <link>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%85%AB%E8%82%A1/</link>
        <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%85%AB%E8%82%A1/</guid>
        <description>&lt;h1 id=&#34;概述&#34;&gt;&lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;概述
&lt;/h1&gt;&lt;h2 id=&#34;关系型数据库和非关系型数据库&#34;&gt;&lt;a href=&#34;#%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93%e5%92%8c%e9%9d%9e%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;关系型数据库和非关系型数据库
&lt;/h2&gt;&lt;h3 id=&#34;关系型数据库&#34;&gt;&lt;a href=&#34;#%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;关系型数据库
&lt;/h3&gt;&lt;p&gt;关系型数据库最典型的数据结构是表，由二维表和其之间的联系组成的数据组织&lt;br&gt;
常见的关系型数据库有SQLServer、Mysql等&lt;br&gt;
优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易于维护&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用方便&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂查询&lt;/strong&gt;：可以使用SQL查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读写性能差&lt;/strong&gt;，尤其是海量数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;固定的表结构&lt;/strong&gt;，缺乏灵活性&lt;/li&gt;
&lt;li&gt;硬件I/O是一个很大的瓶颈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非关系型数据库&#34;&gt;&lt;a href=&#34;#%e9%9d%9e%e5%85%b3%e7%b3%bb%e5%9e%8b%e6%95%b0%e6%8d%ae%e5%ba%93&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;非关系型数据库
&lt;/h3&gt;&lt;p&gt;非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或key-value等&lt;br&gt;
常见的非关系型数据库有redis等&lt;br&gt;
优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;格式灵活&lt;/strong&gt;，存储类型可以是key-value、文档、图片等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速度快&lt;/strong&gt;，可以使用硬盘或随机存储器作为载体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本低&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不支持SQL&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无事务处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查询复杂&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;范式&#34;&gt;&lt;a href=&#34;#%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;范式
&lt;/h2&gt;&lt;h3 id=&#34;第一范式&#34;&gt;&lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;第一范式
&lt;/h3&gt;&lt;p&gt;确保每列的原子性，每列都是不可再分的最小数据单元&lt;/p&gt;
&lt;h3 id=&#34;第二范式&#34;&gt;&lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;第二范式
&lt;/h3&gt;&lt;p&gt;在第一范式的基础上，要求表中每列都与主键相关。&lt;/p&gt;
&lt;h3 id=&#34;第三范式&#34;&gt;&lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;第三范式
&lt;/h3&gt;&lt;p&gt;在第二范式的基础上，要求每列都与主键直接相关，且列与列不存在依赖关系。&lt;/p&gt;
&lt;h3 id=&#34;第四范式&#34;&gt;&lt;a href=&#34;#%e7%ac%ac%e5%9b%9b%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;第四范式
&lt;/h3&gt;&lt;p&gt;在第三范式的基础上，消除多值依赖。即如果一个表中的某些列可以取多个值（多个电话号码），那么这些多值依赖的列应该剥离出来，创建新的表处理。&lt;/p&gt;
&lt;h3 id=&#34;第五范式&#34;&gt;&lt;a href=&#34;#%e7%ac%ac%e4%ba%94%e8%8c%83%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;第五范式
&lt;/h3&gt;&lt;p&gt;在第四范式的基础上，消除奇异化（超规范化）。奇异化是指在消除多值依赖时剥离出来的列存在相互关系，则需要再次拆分为独立的表进行处理。&lt;/p&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a href=&#34;#%e4%ba%8b%e5%8a%a1&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;事务
&lt;/h1&gt;&lt;p&gt;事务是数据库执行的逻辑单位，包含一系列读写操作，整个单元不可分割，是原子性的。&lt;/p&gt;
&lt;h2 id=&#34;四大特性&#34;&gt;&lt;a href=&#34;#%e5%9b%9b%e5%a4%a7%e7%89%b9%e6%80%a7&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;四大特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;隔离性&lt;/strong&gt;，一个事务在其最终提交之前，对其他事务不可见&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;/strong&gt;，整个事务的操作要么全部执行，要么全部不执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性&lt;/strong&gt;，一旦事务结束，则其对数据库的修改就会永久保存在数据库中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt;，数据库总是从一个一致性转态转换到另一个一致性状态。也就是满足如约束、触发器等一致性规则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于单条 SQL 语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。&lt;/p&gt;
&lt;h2 id=&#34;并发事务会出现的问题&#34;&gt;&lt;a href=&#34;#%e5%b9%b6%e5%8f%91%e4%ba%8b%e5%8a%a1%e4%bc%9a%e5%87%ba%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;并发事务会出现的问题
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脏读&lt;/strong&gt;，读到了不存在的数据，这些数据被之前的事务删除了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;，同一事务在不同时刻读同一批的数据可能不同&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻读&lt;/strong&gt;，针对插入操作，有一行的数据被修改，另一个事务插入了这一行更改前的记录行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;，在一个事务内，任一时刻读到的数据一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mysql默认事务隔离级别是可重复读。&lt;br&gt;
另外数据可还可使用MVCC多版本并发控制，通过对数据行的多个办公控制来实现数据库的并发控制。或使用串行化的读写锁进行并发控制。&lt;/p&gt;
&lt;h1 id=&#34;索引&#34;&gt;&lt;a href=&#34;#%e7%b4%a2%e5%bc%95&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;索引
&lt;/h1&gt;&lt;p&gt;见b+树&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
